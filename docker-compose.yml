services:
  # NGINX
  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - microservices-net
    depends_on:
      - api-gateway

  # PROMETHEUS
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-net

  # GRAFANA
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - microservices-net

  # ELK STACK
  opensearch:
    image: opensearchproject/opensearch:2.14.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - bootstrap.memory_lock=true
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=S3cuRe!Pa55w0rd
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - microservices-net

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.14.0
    container_name: opensearch-dashboards
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
    ports:
      - "5601:5601"
    networks:
      - microservices-net
    depends_on:
      opensearch:
        condition: service_healthy

  # REDIS
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6380"
    command: --port 6380
    volumes:
      - ./redis:/data
    networks:
      - microservices-net
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6380", "ping" ]
      interval: 1s
      timeout: 2s
      retries: 10

  # RABBITMQ
  rabbitmq:
    image: rabbitmq:alpine
    container_name: rabbitmq
    ports:
      - "5673:5672"
    networks:
      - microservices-net
    restart: always

  # ZOOKEEPER AND KAFKA
  zookeeper:
    image: bitnami/zookeeper:latest
    platform: linux/amd64
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    platform: linux/amd64
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # HAZELCAST
  hazelcast:
    image: hazelcast/hazelcast:5.5.0
    container_name: hazelcast
    ports:
      - "5701:5701"
    networks:
      - microservices-net

  # ZIPKIN
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
    restart: always

  # POSTGRES DATABASES
  postgres-auth:
    image: postgres:alpine
    container_name: postgres-auth
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth-service
    ports:
      - "5433:5433"
    command: -p 5433
    networks:
      - microservices-net
    restart: always

  postgres-user:
    image: postgres:alpine
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-management-service
    ports:
      - "5434:5434"
    command: -p 5434
    networks:
      - microservices-net
    restart: always

  postgres-rate:
    image: postgres:alpine
    container_name: postgres-rate
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rates
    ports:
      - "5435:5435"
    command: -p 5435
    networks:
      - microservices-net
    restart: always

  # MAIN SERVICES
  config-server:
    container_name: config-server
    image: omerasafbalikci/config-server2
    ports:
      - "8888:8888"
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      zipkin:
        condition: service_started
      prometheus:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 60s
      retries: 5

  discovery-server:
    container_name: discovery-server
    image: omerasafbalikci/discovery-server2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8761:8761"
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      config-server:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    image: omerasafbalikci/api-gateway2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_healthy

  auth-service:
    container_name: auth-service
    image: omerasafbalikci/auth-service2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      - api-gateway
      - rabbitmq
      - postgres-auth

  user-service:
    container_name: user-service
    image: omerasafbalikci/user-management-service2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      - api-gateway
      - auth-service
      - postgres-user

  rest-data-provider:
    container_name: rest-data-provider
    image: omerasafbalikci/rest-data-provider
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      - api-gateway
      - auth-service
      - redis

  tcp-data-provider:
    image: omerasafbalikci/tcp-data-provider
    container_name: tcp-data-provider
    ports:
      - "8084:8084"
    volumes:
      - ./tcp-data-provider/config:/config:rw
    networks:
      - microservices-net
    depends_on:
      - api-gateway
      - auth-service

  rate-hub:
    image: omerasafbalikci/rate-hub
    container_name: rate-hub
    volumes:
      - ./RateDistribution-project/rate-hub/config:/app/rate-hub/config
    networks:
      - microservices-net
    depends_on:
      kafka: { condition: service_healthy }
      hazelcast: { condition: service_started }
      tcp-data-provider:
        condition: service_started
      rest-data-provider:
        condition: service_started

  rate-hub-consumer-db:
    container_name: rate-hub-consumer-db
    image: omerasafbalikci/rate-hub-consumer-db
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      kafka: { condition: service_healthy }
      api-gateway: {
        condition: service_started
      }
      auth-service: {
        condition: service_started
      }
      rate-hub: {
        condition: service_started
      }

  rate-hub-consumer-opensearch:
    container_name: rate-hub-consumer-opensearch
    image: omerasafbalikci/rate-hub-consumer-opensearch
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      kafka: { condition: service_healthy }
      opensearch:
        condition: service_healthy
      opensearch-dashboards:
        condition: service_started
      api-gateway: {
        condition: service_started
      }
      auth-service: {
        condition: service_started
      }
      rate-hub: {
        condition: service_started
      }

networks:
  microservices-net:
    driver: bridge
    name: microservices-net